[
    { "src": "}{|xyz|", "char": 0, "errors": [{"type": "parse-error"}] },
    { "src": "}", "char": 0, "errors": [{"type": "parse-error"}] },
    {
        "src": "{{{%\\y{}}",
        "char": 5,
        "comment": "Backslash followed by non-backslash followed by a '{' -- this should be an error immediately after the first backslash",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{%abc|\\z}}",
        "char": 7,
        "comment": "Reserved chars followed by a '|' that doesn't begin a valid literal -- this should be an error at the first invalid char in the literal",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{%\\y{p}}",
        "char": 3,
        "comment": "Same pattern, but with a valid reserved-char following the erroneous reserved-escape -- the offset should be the same as with the previous one",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{{{%ab|\\z|cd}}",
        "char": 8,
        "comment": "Erroneous literal inside a reserved string -- the error should be at the first erroneous literal char",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "hello {|4.2| %num\\ber}}",
        "char": 18,
        "comment": "Single backslash not allowed",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "hello {|4.2| %num{be\\|r}}",
        "char": 17,
        "comment": "Unescaped '{' not allowed",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "hello {|4.2| %num}be\\|r}}",
        "char": 21,
        "comment": "Unescaped '}' -- will be interpreted as the end of the reserved string, and the error will be reported at the index of '|', which is when the parser determines that the escaped '|' isn't a valid text-escape",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "hello {|4.2| %num\\{be|r}}",
        "char": 25,
        "comment": "Unescaped '|' -- will be interpreted as the beginning of a literal. Error at end of input",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match{|y|}|y|{{{|||}}}",
        "char": 19,
        "comment": "No spaces are required here. The error should be in the pattern, not before",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match {|y|}|foo|bar {{{a}}}",
        "char": 17,
        "comment": "Missing spaces between keys",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match {|y|} |quux| |foo|bar {{{a}}}",
        "char": 25,
        "comment": "Missing spaces between keys",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match {|y|}  |quux| |foo||bar| {{{a}}}",
        "char": 26,
        "comment": "Missing spaces between keys",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match {|y|}  |\\q| * %{! {z}",
        "char": 16,
        "comment": "Error parsing the first key -- the error should be there, not in the also-erroneous third key",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src":  ".match {|y|}  * %{! {z} |\\q|",
        "char": 16,
        "comment": "Error parsing the second key -- the error should be there, not in the also-erroneous third key",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match {|y|}  * |\\q| {\\z}",
        "char": 18,
        "comment": "Error parsing the last key -- the error should be there, not in the erroneous pattern",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match {|y|} {\\|} {@}  * * * {{a}}",
        "char": 14,
        "comment": "Non-expression as scrutinee in pattern -- error should be at the first non-expression, not the later non-expression",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match {|y|}  $foo * {{a}} when * :bar {{b}}",
        "char": 14,
        "comment": "Non-key in variant -- error should be there, not in the next erroneous variant",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{{ foo {|bar|} \\q baz  ",
        "char": 16,
        "comment": "Error should be within the first erroneous `text` or expression",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{{{:    }}}",
        "char": 4,
        "comment": "':' has to be followed by a function name -- the error should be at the first whitespace character",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".local $x = }|foo|}",
        "char": 12,
        "comment": "Expression not starting with a '{'",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".local $x = {|foo|} .l $y = {|bar|} .local $z {|quux|}",
        "char": 22,
        "comment": "Error should be at the first declaration not starting with a `.local`",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".local $bar {|foo|} {{$bar}}",
        "char": 12,
        "comment": "Missing '=' in `.local` declaration",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".local bar = {|foo|} {{$bar}}",
        "char": 7,
        "comment": "LHS of declaration doesn't start with a '$'",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".local $bar = |foo| {{$bar}}",
        "char": 14,
        "comment": "`.local` RHS isn't an expression",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{{extra}}content",
        "char": 9,
        "comment": "Trailing characters that are not whitespace",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match {|x|}  * {{foo}}extra",
        "char": 28,
        "comment": "Trailing characters that are not whitespace",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match {$foo :string} {$bar :string}  one * {{one}}  * * {{other}}   ",
        "char": 66,
        "comment": "Trailing whitespace at end of message should not be accepted either",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{{hi}} ",
        "char": 6,
        "comment": "Trailing whitespace at end of message should not be accepted either",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "empty { }",
        "char": 8,
        "comment": "Empty expression",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match {}  * {{foo}}",
        "char": 8,
        "comment": "Empty expression",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "bad {:}",
        "char": 6,
        "comment": "':' not preceding a function name",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{{no-equal {|42| :number m }}}",
        "char":  27,
        "comment": "Missing '=' after option name",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{{no-equal {|42| :number minimumFractionDigits 2}}}",
        "char":  47,
        "comment": "Missing '=' after option name",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "bad {:placeholder option value}",
        "char":  25,
        "comment": "Missing '=' after option name",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "hello {|4.2| :number min=2=3}",
        "char":  26,
        "comment": "Extra '=' after option name",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "hello {|4.2| :number min=2max=3}",
        "char":  26,
        "comment": "Missing space between options",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "hello {|4.2| :number min=|a|max=3}",
        "char": 28,
        "comment": "Missing whitespace between valid options",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "hello {|4.2| :number min=|\\a|}",
        "char": 27,
        "comment": "Ill-formed RHS of option -- the error should be within the RHS, not after parsing options",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "no-equal {|42| :number   {}",
        "char": 25,
        "comment": "Junk after annotation",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "bad {:placeholder option=}",
        "char": 25,
        "comment": "Missing RHS of option",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "bad {:placeholder option}",
        "char": 24,
        "comment": "Missing RHS of option",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "bad {$placeholder option}",
        "char": 18,
        "comment": "Annotation is not a function or reserved text",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "no {$placeholder end",
        "char": 17,
        "comment": "Annotation is not a function or reserved text",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match  * {{foo}}",
        "char": 8,
        "comment": "Missing expression in selectors",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match |x|  * {{foo}}",
        "char": 7,
        "comment": "Non-expression in selectors",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".match {|x|}  * foo",
        "char": 19,
        "comment": "Missing RHS in variant",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{$:abc}",
        "char": 2,
        "comment": "Variable names can't start with a : or -",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{$-abc}",
        "char": 2,
        "comment": "Variable names can't start with a : or -",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{$bar+foo}",
        "char": 5,
        "comment": "Missing space before annotation. Note that {{$bar:foo}} and {{$bar-foo}} are valid, because variable names can contain a ':' or a '-'",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{|3.14|:foo}",
        "char": 7,
        "comment": "Missing space before annotation.",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{|3.14|-foo}",
        "char": 7,
        "comment": "Missing space before annotation.",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": "{|3.14|+foo}",
        "char": 7,
        "comment": "Missing space before annotation.",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".local $foo = {$bar} .match {$foo}  :one {one} * {other}",
        "char": 36,
        "comment": "Unquoted literals can't begin with a ':'",
        "errors": [{"type": "parse-error"}]
    },
    {
        "src": ".local $foo = {$bar :fun option=:a} {{bar {$foo}}}",
        "char": 32,
        "comment": "Unquoted literals can't begin with a ':'",
        "errors": [{"type": "parse-error"}]
    },
    { "src": "{|foo| {#markup}}", "char": 7, "comment": "Markup in wrong place", "errors": [{"type": "parse-error"}] },
    { "src": "{|foo| #markup}", "char": 7, "comment": "Markup in wrong place", "errors": [{"type": "parse-error"}] },
    { "src": "{|foo| {#markup/}}", "char": 7, "comment": "Markup in wrong place", "errors": [{"type": "parse-error"}] },
    { "src": "{|foo| {/markup}}", "char": 7, "comment": "Markup in wrong place", "errors": [{"type": "parse-error"}] },
    { "src": ".input $x = {|1|} {{{$x}}}", "char": 7, "comment": ".input with non-variable-expression", "errors": [{"type": "parse-error"}] },
    { "src": ".input $x = {:number} {{{$x}}}", "char": 7, "comment": ".input with non-variable-expression", "errors": [{"type": "parse-error"}] },
    { "src": ".input {|1| :number} {{{$x}}}", "char": 7, "comment": ".input with non-variable-expression", "errors": [{"type": "parse-error"}] },
    { "src": ".input {:number} {{{$x}}}", "char": 7, "comment": ".input with non-variable-expression", "errors": [{"type": "parse-error"}] },
    { "src": ".input {|1|} {{{$x}}}", "char": 7, "comment": ".input with non-variable-expression", "errors": [{"type": "parse-error"}] },
    { "src": ".", "char": 1, "errors": [{"type": "parse-error"}]},
    { "src":  "{", "char": 1, "errors": [{"type": "parse-error"}]},
    { "src":  "}", "char": 0, "errors": [{"type": "parse-error"}]},
    { "src":  "{}", "char": 1, "errors": [{"type": "parse-error"}]},
    { "src":  "{{", "char": 2, "errors": [{"type": "parse-error"}]},
    { "src":  "{{}", "char": 3, "errors": [{"type": "parse-error"}]},
    { "src":  "{{}}}", "char": 4, "errors": [{"type": "parse-error"}]},
    { "src":  "{|foo| #markup}", "char": 7, "errors": [{"type": "parse-error"}]},
    { "src":  "{{missing end brace}", "char": 20, "errors": [{"type": "parse-error"}]},
    { "src":  "{{missing end braces", "char": 20, "errors": [{"type": "parse-error"}]},
    { "src":  "{{missing end {$braces", "char": 22, "errors": [{"type": "parse-error"}]},
    { "src":  "{{extra}} content", "char": 9, "errors": [{"type": "parse-error"}]},
    { "src":  "empty { } placeholder", "char": 8, "errors": [{"type": "parse-error"}]},
    { "src":  "missing space {42:func}", "char": 17, "errors": [{"type": "parse-error"}]},
    { "src":  "missing space {|foo|:func}", "char": 20, "errors": [{"type": "parse-error"}]},
    { "src":  "missing space {|foo|@bar}", "char": 20, "errors": [{"type": "parse-error"}]},
    { "src":  "missing space {:func@bar}", "char": 20, "errors": [{"type": "parse-error"}]},
    { "src":  "{:func @bar@baz}", "char": 11, "errors": [{"type": "parse-error"}]},
    { "src":  "{:func @bar=42@baz}", "char": 14, "errors": [{"type": "parse-error"}]},
    { "src":  "{+reserved@bar}", "char": 10, "errors": [{"type": "parse-error"}]},
    { "src":  "{&private@bar}", "char": 9, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {:} placeholder", "char": 6, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {\\u0000placeholder}", "char": 5, "errors": [{"type": "parse-error"}]},
    { "src":  "no-equal {|42| :number minimumFractionDigits 2}", "char": 45, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {:placeholder option=}", "char": 25, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {:placeholder option value}", "char": 25, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {:placeholder option:value}", "char": 30, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {:placeholder option}", "char": 24, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {:placeholder:}", "char": 18, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {::placeholder}", "char": 6, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {:placeholder::foo}", "char": 18, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {:placeholder option:=x}", "char": 25, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {:placeholder :option=x}", "char": 18, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {:placeholder option::x=y}", "char": 25, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {$placeholder option}", "char": 18, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {:placeholder @attribute=}", "char": 29, "errors": [{"type": "parse-error"}]},
    { "src":  "bad {:placeholder @attribute=@foo}", "char": 29, "errors": [{"type": "parse-error"}]},
    { "src":  "no {placeholder end", "char": 16, "errors": [{"type": "parse-error"}]},
    { "src":  "no {$placeholder end", "char": 17, "errors": [{"type": "parse-error"}]},
    { "src":  "no {:placeholder end", "char": 20, "errors": [{"type": "parse-error"}]},
    { "src":  "no {|placeholder| end", "char": 18, "errors": [{"type": "parse-error"}]},
    { "src":  "no {|literal} end", "char": 17, "errors": [{"type": "parse-error"}]},
    { "src":  "no {|literal or placeholder end", "char": 31, "errors": [{"type": "parse-error"}]},
    { "src":  ".local bar = {|foo|} {{_}}", "char": 7, "errors": [{"type": "parse-error"}]},
    { "src":  ".local #bar = {|foo|} {{_}}", "char": 7, "errors": [{"type": "parse-error"}]},
    { "src":  ".local $bar {|foo|} {{_}}", "char": 12, "errors": [{"type": "parse-error"}]},
    { "src":  ".local $bar = |foo| {{_}}", "char": 14, "errors": [{"type": "parse-error"}]},
    { "src":  ".match {#foo} * {{foo}}", "char": 8, "errors": [{"type": "parse-error"}]},
    { "src":  ".match {} * {{foo}}", "char": 8, "errors": [{"type": "parse-error"}]},
    { "src":  ".match {|foo| :x} {|bar| :x} ** {{foo}}", "char": 30, "errors": [{"type": "parse-error"}]},
    { "src":  ".match * {{foo}}", "char": 7, "errors": [{"type": "parse-error"}]},
    { "src":  ".match {|x| :x} * foo", "char": 21, "errors": [{"type": "parse-error"}]},
    { "src":  ".match {|x| :x} * {{foo}} extra", "char": 31, "errors": [{"type": "parse-error"}]},
    { "src":  ".match |x| * {{foo}}", "char": 7, "errors": [{"type": "parse-error"}]},
    { "src": ".match {|foo| :string} o:ne {{one}}  * {{other}}", "char": 24, "comment" : "tests for ':' in unquoted literals (not allowed)" , "errors": [{"type": "parse-error"}]},
    { "src": ".match {|foo| :string} one: {{one}}  * {{other}}", "char": 26, "comment" : "tests for ':' in unquoted literals (not allowed)" , "errors": [{"type": "parse-error"}]},
    { "src": ".local $foo = {|42| :number option=a:b} {{bar {$foo}}}", "char": 36, "comment" : "tests for ':' in unquoted literals (not allowed)" , "errors": [{"type": "parse-error"}]},
    { "src": ".local $foo = {|42| :number option=a:b:c} {{bar {$foo}}}", "char": 36, "comment" : "tests for ':' in unquoted literals (not allowed)" , "errors": [{"type": "parse-error"}]},
    { "src": "{$bar:foo}", "char": 5, "comment" : "tests for ':' in unquoted literals (not allowed)", "errors": [{"type": "parse-error"}]},
    {
        "src":  ".match {1} {{_}}",
        "char": 12,
        "comment": "Disambiguating a wrong .match from an unsupported statement",
        "errors": [{"type": "parse-error"}]
    }
]
