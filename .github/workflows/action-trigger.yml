name: Play with various flow activation methods

on:
  # To trigger the Env Test workflow manually, follow the instructions in
  # https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - error
        - warning
        - debug
      gitTag:
        description: 'Git tag at which to sync'
        type: string
      gitRepeatBuildTag:
        description: 'Timestamp to use for repeatable builds'
        required: false
        type: string
      releaseAct:
        description: 'Create and post to release'
        required: false
        type: boolean
      releaseTag:
        description: 'Tag used to create a release / post to it'
        type: string

jobs:
  log-the-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Show environment
        run: |
          echo "==============================" > report.log
          echo "Log level   : $LEVEL" >> report.log
          echo "ReleaseAct  : $DO_RELEASE" >> report.log
          echo "git tag     : $GIT_TAG" >> report.log
          echo "Timestamp   : $TIME_STAMP" >> report.log
          echo "Environment : ${{ inputs.environment }}" >> report.log
          echo "GITHUB_SHA  : ${GITHUB_SHA}" >> report.log
          echo "GITHUB_REF  : ${GITHUB_REF}" >> report.log
          echo "==============================" >> report.log
          set >> report.log
          zip report.zip report.log
        env:
          LEVEL: ${{ inputs.logLevel }}
          DO_RELEASE: ${{ inputs.releaseAct }}
          GIT_TAG: ${{ inputs.gitTag }}
          TIME_STAMP: ${{ inputs.gitRepeatBuildTag }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: releaseDraft76
          release_name: Release releaseDraft76
          draft: true
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./report.zip
          asset_name: report.zip
          asset_content_type: application/zip
      - name: Try gh, see if available and works after release
        run: |
          echo "=============================="
          gh --help
          gpg -version
          echo "=============================="
      - name: Try gh, see if available and works after release
        if: ${{ inputs.releaseAct && startsWith(inputs.releaseTag, 'releaseDraft') }}
        run: |
          echo "=============================="
          gh --help
          gpg -version
          echo "=============================="
